version: 2.1
setup: true
orbs:
  queue: eddiewebb/queue@1.12.0
  continuation: circleci/continuation@0.3.1
  go: circleci/go@1.7.3
  docker: circleci/docker@2.2.0
executors:
  python-cimg-executor:
    docker:
      - image: cimg/python:3.11
  docker:
    docker:
      - image: cimg/base:2022.07
  linux: # a Linux VM running Ubuntu 20.04
    machine:
      image: ubuntu-2004:202107-02
  linux-n: # a Linux VM running Ubuntu 20.04
    machine:
      image: ubuntu-2004:202107-02
  linux-docker:
    docker:
      - image: cimg/base:2022.12-18.04
  linux-a: # a Linux VM running Ubuntu 20.044
    machine:
      image: ubuntu-2004:202101-01
    #resource_class: arm.medium
  macos: # macos executor running Xcode
    macos:
      xcode: 14.2.0
    #resource_class: macos.m1.large.gen1


commands:
  block_workflow:
    parameters:
      wait_for_job_name:
        type: string
        description: 
          "Name of the Job you want to make wait"
        default: ""
      only-on-branch:
        type: string 
        description:
          "Name of the branch"
        default: "main"
    steps:
      - queue/block_workflow:
          requires:
            - << parameters.wait_for_job_name >>
          time: '5'


jobs:
  azure_marketplace:
    parameters:
      use-docker-layer-caching:
        type: boolean
        description: Setup docker layer caching for optimized build
        default: true
      remote-docker-version:
        type: string
        description: Specify the remote docker version
        default: 20.10.18
    executor: python-cimg-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.18
          docker_layer_caching: true
      - run:
          name: Install Azure CLI
          command: |
            docker pull mcr.microsoft.com/container-package-app:latest
            pwd 
            cd ..
            pwd 
            docker run -e APP_ID=${APP_ID} -e AZURE_PASSWORD=${AZURE_PASSWORD} -e TENANT=${TENANT} -d --name microsoft_container -v /var/run/docker.sock:/var/run/docker.sock -v project:/data mcr.microsoft.com/container-package-app:latest tail -f /dev/null
            docker exec microsoft_container /bin/bash -xc '
              export REGISTRY_NAME="fluxninja.azurecr.io"
              az login --service-principal -u ${APP_ID} --password ${AZURE_PASSWORD} --tenant ${TENANT}
              az acr login -n $REGISTRY_NAME
              docker pull nginx:1.23
              docker tag nginx:1.23 fluxninja.azurecr.io/nginx:1.23
              docker push fluxninja.azurecr.io/nginx:1.23
              exit
            '




  build_and_test_node:
    docker:
      - image: cimg/node:16.11.1
    steps:
      - checkout
      # install dependencies
      - run:
          name: install dependencies
          command: |
            cd node
            npm install dotenv
            npm install express
      - run:
          name: test
          command: |
            cd node
            npm install jest supertest

  multiple_os_run:
    parameters:
      goarch:
        type: string
        description: the GOARCH to use for the build
      goos:
        type: string
        description: the GOOS to use for the build
    executor: linux-docker
    environment:
      PACKAGES_DIR: "/tmp/packages"
      GOARCH: <<parameters.goarch>>
      GOOS: <<parameters.goos>>
    steps:
      - checkout
      - go/install
      - run:
          name: Run the Go build command
          command: |
            echo "GOOS==>"$GOOS
            echo "GOARCH==>"$GOARCH
            env GOOS=${GOOS} GOARCH=${GOARCH} go build main.go
            file main 

  multiple_os_run_aperture:
    parameters:
      goarch:
        type: string
        description: the GOARCH to use for the build
      goos:
        type: string
        description: the GOOS to use for the build
    executor: linux-docker
    environment:
      PACKAGES_DIR: "/tmp/packages"
      GOARCH: <<parameters.goarch>>
      GOOS: <<parameters.goos>>
    steps:
      - checkout
      - go/install
      - run:
          working_directory: aperture/cmd/aperturectl
          name: Run the Go build command
          command: |
            echo "GOOS==>"$GOOS
            echo "GOARCH==>"$GOARCH

            env GOOS=${GOOS} GOARCH=${GOARCH} go build .
            file aperturectl

      

  install_and_run_go:
    executor: macos
    steps:
      - checkout
      - run:
          name: Install Go
          command: |
            curl -L -o go.tar.gz https://golang.org/dl/go1.17.4.darwin-amd64.tar.gz
            sudo tar -C /usr/local -xzf go.tar.gz
            ls -al /usr/local/go/bin 
            mkdir ~/go
            export GOPATH=~/go
            export PATH=$PATH:/usr/local/go/bin
            echo $PATH
      - run:
          name: Run Go Command
          command: |
            cd /usr/local/go/bin
            ls -al
            file go
            ./go version 
            ./go env
            echo "test"
            uname -a
            arch
  
  run_go_env-normal:
    executor: linux-docker
    steps:
      - checkout
      - go/install
      - run: 
          name: PWD command 
          command: |
            pwd 
            ls -al
      - run: 
          name: Test for go ENV 
          command: |
            go env
      - run:
          name: Uname command 
          command: | 
            uname -a
  
  run_go_env-arm:
    executor: linux-a
    #resource_class: arm.medium
    steps:
      - checkout
      # - go/install
      # - run: 
      #     name: Test for go ENV 
      #     command: |
      #       go env
      - run:
          name: Uname command 
          command: | 
            uname -a
            arch

  diff-os:
    parameters:
      os:
        type: executor
      gcloud:
        type: boolean
        description: yes or no
      ciname: 
        type: string
        description: name of the ci 
    executor: << parameters.os >>
    environment:
      GCLOUD: << parameters.gcloud >>
      CINAME: << parameters.ciname >>
    steps:
      - checkout
      - run: 
          name: Running the OS command 
          command: |
            uname -a
            arch
            hostname
            echo $GCLOUD
            echo $CINAME
            sudo apt-get update

  test-job:
    executor: base-cimg-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Test base image
          command: |
            ls -l
            docker version
            cat /etc/lsb-release
  
  update-env: 
    executor: base-cimg-executor
    steps:
      - checkout
      - queue/until_front_of_line:
          block-workflow: true
          time: '5'
          only-on-branch: 'main'
      - run:
          name: Update Env
          command: | 
            echo "Update Env"
            echo "Update block-orb-test"
            # start time
            date +"%H:%M:%S"

            # sleep for 5 seconds
            sleep 120

            # end time
            date +"%H:%M:%S"
  normal-job:
    executor: docker
    parameters:
      component:
        type: string
        default: ""
      extra_build_arg:
        type: string
        default: ""
    environment:
      EXTRA_BUILD_ARG : << parameters.extra_build_arg >>
    steps:
      #- checkout
      - run:
          name: Check the build flag
          command:
            echo "${EXTRA_BUILD_ARG}"
      - run: 
          name: Running the normal JOb
          command: |
            if [ -z << parameters.component >> ]; then
                echo "Skip the version creation"
            else
              if $CI 
              then
                echo "Yes the Circleci variable is set"
              fi
            fi
            ls -al  
            branch=main 
            commit=3dvs4e234
            EXTRA_BUILD_ARG="$EXTRA_BUILD_ARG,BRANCH=$branch,COMMIT=$commit"
            declare -p EXTRA_BUILD_ARG >> "${BASH_ENV}"
      - run:
          name: After addition
          command:
            echo "${EXTRA_BUILD_ARG}"
  docker-build-job:
    executor: docker
    parameters:
      extra_build_args:
        type: string
        description: "Extra build arg"
        default: ""
    environment:
      EXTRA_BUILD_ARG : << parameters.extra_build_args >>
    steps:
      - checkout
      - run:
          name: Setting the env 
          command: |
              version=0.32.1
              git_branch=my-test-branch
              git_commit_hash=fdsgfsdtg343fdsdestf
            
              export version
              export git_branch
              export git_commit_hash
              declare -p version >> "${BASH_ENV}"
              declare -p git_branch >> "${BASH_ENV}"
              declare -p git_commit_hash >> "${BASH_ENV}"
      - run:
          name: adding all the set value to new env
          command: |
            EXTRA_BUILD_ARG="--build-arg "${EXTRA_BUILD_ARG}" --build-arg VERSION="${version}" --build-arg GIT_BRANCH="${git_branch}" --build-arg GIT_COMMIT_HASH="${git_commit_hash}""
            declare -p EXTRA_BUILD_ARG >> "${BASH_ENV}"
      - run:
          name: Print main value
          command: |
            echo $EXTRA_BUILD_ARG
      - docker/build:
          extra_build_args: "${EXTRA_BUILD_ARG}"
          image: my-test

  # block-orb-test:
  #   executor: base-cimg-executor
  #   steps:
  #     - checkout
  #     - eddiewebb/queue/lock:
  #         resource-name: my-resource
  #     - run:
  #         name: block-orb-test
  #         command: | 
  #           echo "Update block-orb-test"
  #           # start time
  #           date +"%H:%M:%S"

  #           # sleep for 5 seconds
  #           sleep 120

  #           # end time
  #           date +"%H:%M:%S"
  #     - eddiewebb/queue/unlock:
  #         resource-name: my-resource


workflows:
  version: 2

  publish_azure_marketplace:
    jobs:
      - azure_marketplace:
          name: Publish Azure Marketplace
  
  # testing-for-npm-cache:
  #   jobs:
  #     - build_and_test_node:
  #         name: running the chace Node Job
  # running-docker-build-job:
  #   jobs:
  #     - docker-build-job:
  #         name: Running dockerbuild JOb

  # multiple_os_run-w:
  #   jobs:
  #     - multiple_os_run:
  #         name: Linux amd64 
  #         matrix:
  #           parameters:
  #             goarch: ["amd64","arm64"]
  #             goos: ["linux","darwin"]

  # multiple_os_run-w-aperture:
  #   jobs:
  #     - multiple_os_run_aperture:
  #         name: Linux amd64 
  #         matrix:
  #           parameters:
  #             goarch: ["amd64","arm64"]
  #             goos: ["linux","darwin"]
  #     #     goos: linux
      #     goarch: amd64
      # - multiple_os_run:
      #     name: Linux arm64
      #     goos: linux
      #     goarch: arm64
      # - multiple_os_run:
      #     name: Darwin amd64
      #     goos: darwin
      #     goarch: amd64

  # run-go-env-w:
  #   jobs:
  #     # - run_go_env-normal:
  #     #     name: "Go env normal"
  #     # - run_go_env-arm:
  #     #     name: "Go env arm"
  #     - install_and_run_go:
  #         name: "Macos run"
  #     - diff-os:
  #         gcloud: true 
  #         ciname: "Hey this is diff os CI"
  #         matrix:
  #           parameters:
  #             os: [linux-a, linux, macos]

  # diff-os-worflow:
  #   jobs:
  #     - diff-os:
  #         gcloud: true 
  #         ciname: "Hey this is diff os CI"
  #         matrix:
  #           parameters:
  #             os: [docker, linux, macos]
  # post-release:
  #   jobs:
  #     - continuation/continue:
  #         configuration_path: .circleci/post-release.yaml


  # first-test:
  #   jobs:
  #     - update-env:
  #         name: "Running the update env"

      # - block-orb-test:
      #     name:  Test for block-orb
      # - test-job:
      #     name: workflow-test-job 
      # - update-env:
      #     # filters:
      #     #   branches:
      #     #     only:
      #     #       - main
      #     requires:
      #       - "workflow-test-job"
      #     name: update-env-flow 
  




  # build:
  #   docker:
  #     - image: python:3.6.3-jessie

  #   #working_directory: /tmp
  #   steps:
  #     - checkout
  #     # - run:
  #     #     name: Creating Dummy Artifacts
  #     #     working_directory: /tmp
  #     #     command: |
  #     #       echo "my artifact file" > /tmp/artifact-1;
  #     #       mkdir /tmp/artifacts;
  #     #       echo "my artifact files in a dir" > /tmp/artifacts/artifact-2;
  #     - run:
  #         name: "running requirements.txt file"
  #         command: |
  #           pip install -r requirements.txt
  #     - run:
  #         name: Running python script
  #         #working_directory: /tmp
  #         command: |
  #           echo "Running python make file"
  #           ls -al
  #           mkdir /tmp/artifacts
  #           make run-python-code > /tmp/artifacts/python-test

  #     - store_artifacts:
  #         path: /tmp/artifacts
          #destination: python-test-file
          

      # - store_artifacts:
      #     path: /tmp/artifact-1
      #     destination: artifact-file

      # - store_artifacts:
      #     path: /tmp/artifacts
      #     destination: sachin
  